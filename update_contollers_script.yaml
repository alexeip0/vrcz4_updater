alias: UpdateLevitonControllers
variables:
  dev_db: |
    {#
      UpdateLevitonControllers

      Toggles the state of the switches controlled by the
      network of VRCZ4 controllers based on device events.

      Also updates controller LEDs to match the state of the
      switches.

      Can be called in 2 ways:

      1. When a controller button is pressed.
         Expected parameters:
         - ctrl_device_id(string) - zwave device_id of the controller.
         - value(int) - 1-4 if "On" side of the corresponding
           button was pressed. 5-8 if "Off" side was pressed.

      2. When a switch is toggled (physically or in UI)
         Expected parameters:
         - switch_entity_id(string) - entry name of the toggled
           switch.

      Setup:
      
      Define below 'dev_db' dictionary of lists to represent the
      mapping of the controller buttons to corresponding switches
      in your network.
      Element 0 in each list corresponds to the 1st button,
      element 1 to 2nd and so on. Up to 4 elements per list.
      
      E.g.
      {
        'abc': ['switch1.name', 'switch2.name'],
        'xyz': ['switch3.name', 'switch2.name', 'switch4.name']
      }

      Represents a network of 2 controllers with device ids 'abc' and 'xyz'.
      Controller 'abc' has buttons 1 and 2 assigned to switch1 and switch2.
      Controller 'xyz' has buttons 1, 2, 3 assigend to switch3, switch2
      and switch4 in that order.
    #}
    {{ >>> DEFINE DICTIONARY HERE <<< }}
sequence:
  - if:
      - condition: template
        alias: Is this is a controller key press?
        value_template: "{{ ctrl_device_id is defined }}"
    then:
      - choose:
          - conditions:
              - condition: template
                alias: Is this is an On key press and device is Off?
                value_template: >
                  {{ value < 5 and states(dev_db[ctrl_device_id][value - 1]) ==
                  'off' }}
            sequence:
              - if:
                  - condition: template
                    value_template: >
                      {{ dev_db[ctrl_device_id][value - 1].startswith('light')
                      }}
                then:
                  - service: light.turn_on
                    target:
                      device_id: "{{ device_id(dev_db[ctrl_device_id][value - 1]) }}"
                else:
                  - service: switch.turn_on
                    target:
                      device_id: "{{ device_id(dev_db[ctrl_device_id][value - 1]) }}"
              - service: script.updatelevitonleds
                data:
                  dev_db: "{{dev_db}}"
                  switch_entity_id: "{{dev_db[ctrl_device_id][value - 1]}}"
          - conditions:
              - condition: template
                alias: Is this is an Off key press and device is On?
                value_template: >
                  {{ value > 4 and states(dev_db[ctrl_device_id][value - 5]) ==
                  'on' }}
            sequence:
              - if:
                  - condition: template
                    value_template: >
                      {{ dev_db[ctrl_device_id][value - 5].startswith('light')
                      }}
                then:
                  - service: light.turn_off
                    target:
                      device_id: "{{ device_id(dev_db[ctrl_device_id][value - 5]) }}"
                else:
                  - service: switch.turn_off
                    target:
                      device_id: "{{ device_id(dev_db[ctrl_device_id][value - 5]) }}"
              - service: script.updatelevitonleds
                data:
                  dev_db: "{{dev_db}}"
                  switch_entity_id: "{{dev_db[ctrl_device_id][value - 5]}}"
    else:
      - service: script.updatelevitonleds
        data:
          dev_db: "{{dev_db}}"
          switch_entity_id: "{{switch_entity_id}}"
mode: single
icon: mdi:microsoft-xbox-controller-menu
