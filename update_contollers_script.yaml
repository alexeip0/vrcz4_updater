alias: UpdateLevitonControllers
variables:
  dev_db: |
    {#
      UpdateLevitonControllers

      Toggles the state of the switches/lights controlled by
      the network of VRCZ4 controllers based on device events.

      Also updates controller LEDs to match the state of the
      switches/lights.

      Can be called in 3 ways:

      1. When a controller button is pressed.
         Expected parameters:
         - ctrl_device_id(string) - zwave device_id of the controller.
         - value(int) - 1-4 if "On" side of the corresponding
           button was pressed. 5-8 if "Off" side was pressed.

      2. When a switch/light is toggled (physically or in UI)
         Expected parameters:
         - switch_entity_id(string) - entry name of the toggled
           switch/light.

      3. When controller level button is pressed.
         Expected parameters:
         - ctrl_device_id(string) - zwave device_id of the controller.
         - direction(string) - "up" or "down"
         (this is equivalent to "On" operation on the last controller
          button, followed by +/-20 brightness adjustment)

      Setup:
      
      Define below 'dev_db' dictionary of lists to represent the
      mapping of the controller buttons to the corresponding
      switches/lights in your network.

      Element 0 in each list corresponds to the 1st button,
      element 1 to the 2nd and so on. Up to 4 elements per list.
      
      E.g.
      {
        'abc': ['switch.entity1', 'light.entity2'],
        'xyz': ['light.entity3', 'light.entity2', 'switch.entity4']
      }

      Represents a network of 2 controllers with device ids 'abc' and 'xyz'.
      Controller 'abc' has buttons 1 and 2 assigned to entity1 and entity2.
      Controller 'xyz' has buttons 1, 2, 3 assigend to entity3, entity2
      and entity4 in that order.
    #}
    {{ >>> DEFINE DICTIONARY HERE <<< }}
sequence:
  - if:
      - condition: template
        alias: Is this is a controller key press?
        value_template: "{{ ctrl_device_id is defined }}"
    then:
      - choose:
          - conditions:
              - condition: template
                alias: Is this a Level key press?
                value_template: "{{ direction is defined }}"
            sequence:
              - variables:
                  switch_entity_id: >
                    {{ dev_db[ctrl_device_id][int(states('input_number.' +
                    ctrl_device_id))] }}
              - service: script.switchturnon
                data:
                  dev_db: "{{dev_db}}"
                  switch_entity_id: "{{switch_entity_id}}"
                  offset: "{{ 40 if direction == 'up' else -40 }}"
          - conditions:
              - condition: template
                alias: Is this is an On key press?
                value_template: "{{ value < 5 }}"
            sequence:
              - service: script.switchturnon
                data:
                  dev_db: "{{dev_db}}"
                  switch_entity_id: "{{dev_db[ctrl_device_id][value - 1]}}"
              - service: input_number.set_value
                data:
                  value: "{{value - 1}}"
                target:
                  entity_id: input_number.{{ctrl_device_id}}
          - conditions:
              - condition: template
                alias: Is this is an Off key press?
                value_template: "{{ value > 4 }}"
            sequence:
              - service: script.switchturnoff
                data:
                  dev_db: "{{dev_db}}"
                  switch_entity_id: "{{dev_db[ctrl_device_id][value - 5]}}"
              - service: input_number.set_value
                data:
                  value: "{{value - 5}}"
                target:
                  entity_id: input_number.{{ctrl_device_id}}
    else:
      - service: script.updatelevitonleds
        data:
          dev_db: "{{dev_db}}"
          switch_entity_id: "{{switch_entity_id}}"
mode: single
icon: mdi:microsoft-xbox-controller-menu
