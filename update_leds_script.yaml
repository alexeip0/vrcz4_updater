alias: UpdateLevitonLEDs
sequence:
  - repeat:
      for_each: |
        {#
          UpdateLevitonLEDs

          Updates LEDs of the controllers associated with a given switcht/light
          to match its new state.

          Expected parameters:
          - dev_db(dict) - reference to dev_db in UpdateLevitonControllers
          - switch_entity_id(string) - entity_id of the switch/light that toggled
        #}
        {% set ns = namespace(ctrls=[]) %}
        {% for ctrl_id, sw_list in dev_db.items() %}
        {%   if switch_entity_id in sw_list %}
        {%     set ns.ctrls = ns.ctrls + [ctrl_id] %}
        {%   endif %}
        {% endfor %}
        {{ ns.ctrls }}
      sequence:
        - variables:
            led_byte: |
              {% macro leviton_leds(switch_entities) %}
              {% set bitmap = [{'off': 0, 'on': 1},
                               {'off': 0, 'on': 2},
                               {'off': 0, 'on': 4},
                               {'off': 0, 'on': 8}] %}
              {% set ns = namespace(x=[]) %}
              {% for i in range(switch_entities|length) %}
              {% set ns.x = ns.x + [bitmap[i][states(switch_entities[i])]] %}
              {% endfor %}
              {{ ns.x|sum }}
              {% endmacro %}
              {{leviton_leds(dev_db[repeat.item])}}
        - data:
            command_class: "145"
            method_name: sendData
            parameters:
              - 29
              - type: Buffer
                data:
                  - 13
                  - 1
                  - 255
                  - "{{led_byte}}"
                  - 0
                  - 0
                  - 10
            device_id: "{{repeat.item}}"
          action: zwave_js.invoke_cc_api
mode: single
icon: mdi:ceiling-light-multiple-outline
